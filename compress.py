'''
Created on 07.01.2015

@author: dddsnn
'''

import bitstring as bs

def order_enc(bits, sample_len):
    if len(bits) % sample_len:
        raise ValueError('Input not divisible by sample length')
    res = bs.BitStream()
    num_samples = len(bits) // sample_len
    for i in range(sample_len):
        for s in range(num_samples):
            pos = s * sample_len + i
            res += bits[pos:pos + 1]
    return res

def order_dec(bits, sample_len):
    if len(bits) % sample_len:
        raise ValueError('Input not divisible by sample length')
    res = bs.BitStream()
    num_samples = len(bits) // sample_len
    for s in range(num_samples):
        for i in range(sample_len):
            pos = i * num_samples + s
            res += bits[pos:pos + 1]
    return res

def mtf_enc(bits):
    res = bs.BitStream()
    last = False
    for b in bits:
        if b == last:
            res += bs.Bits('0b0')
        else:
            res += bs.Bits('0b1')
            last = b
    return res

def mtf_dec(bits):
    res = bs.BitStream()
    last = bs.BitStream('0b0')
    for b in bits:
        if b == True:
            last.invert()
        res += last
    return res

def rl_enc(bits):
    def write_zeros():
        nonlocal res
        res += bs.Bits('0b0')
        x = bs.Bits(ue=zero_count)
        res += x
    res = bs.BitStream()
    zero_count = 0
    for b in bits:
        if b:
            # write zeros first
            if zero_count:
                write_zeros()
                zero_count = 0
            # just write 1's normally, they're rare
            res += bs.Bits('0b1')
        else:
            zero_count += 1
    # write any remaining zeros
    if zero_count:
        write_zeros()
    return res

def rl_dec(bits):
    res = bs.BitStream()
    while bits.pos != bits.len:
        b = bits.read('bits:1')
        if b[0]:
            res += b
        else:
            num_zeros = bits.read('ue')
            res += bs.Bits(num_zeros)
    return res

def compress(bits, sample_len):
    reordered = order_enc(bits, sample_len)
    mtfed = mtf_enc(reordered)
    return rl_enc(mtfed)

def decompress(bits, sample_len):
    rl_decoded = rl_dec(bits)
    un_mtfed = mtf_dec(rl_decoded)
    return order_dec(un_mtfed, sample_len)

if __name__ == '__main__':
    # sample size 1
    test1 = bs.Bits('0b00011111111111111000111111111111110010001111111111111111111111100010000000000000')
    # sample size 13
    test2 = bs.Bits('0b
    print(len(test2))
    print(len(compress(test2, 13)))
    print(decompress(compress(test2, 13), 13) == test2)
#     print(mtf_dec(mtf_enc(test2)) == test2)
#     print(test2)
#     print(order_enc(test2, 13))
